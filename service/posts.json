[{"id":"139","title":"Spring Framework ile Java Tabanl\u0131 DataSource Konfigurasyonu","content_half":"Merhaba arkada\u015flar ,bu yazd\u0131ma Spring Framework DataSource konfigurasyonunu XML kullanmadan sadece Java tabanl\u0131 olarak olu\u015fturaca\u011f\u0131z.(Bu &ouml;rnekte MySQL kullan\u0131lacakt\u0131r.) \r\n\r\n&Ouml;ncelikle .properties dosyam\u0131z\u0131 olu\u015fturuyoruz.\r\n\r\n&nbsp;\r\n\r\n\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql:\/\/localhost:3306\/database-name\r\nusername = root\r\npassword =&nbsp;\r\n\r\n&nbsp;\r\n\r\n\r\nArd\u0131ndan s\u0131n\u0131f\u0131m\u0131z\u0131 olu\u015fturuyoruz.\r\n\r\n\r\n@Configuration\r\n@PropertySource(&quot;classpath:\/mysql.pro...\n","content_full":"<p>Merhaba arkada\u015flar ,bu yazd\u0131ma <strong>Spring Framework<\/strong> <strong>DataSource <\/strong>konfigurasyonunu <strong>XML<\/strong> kullanmadan sadece <strong>Java <\/strong>tabanl\u0131 olarak olu\u015fturaca\u011f\u0131z.<strong>(Bu &ouml;rnekte MySQL kullan\u0131lacakt\u0131r.) <\/strong><br \/>\r\n<br \/>\r\n&Ouml;ncelikle <strong>.properties <\/strong>dosyam\u0131z\u0131 olu\u015fturuyoruz.<br \/>\r\n<br \/>\r\n&nbsp;<\/p>\r\n\r\n<pre class=\"brush:java\">\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql:\/\/localhost:3306\/database-name\r\nusername = root\r\npassword =&nbsp;<\/pre>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><br \/>\r\nArd\u0131ndan s\u0131n\u0131f\u0131m\u0131z\u0131 olu\u015fturuyoruz.<\/p>\r\n\r\n<pre class=\"brush:java\">\r\n@Configuration\r\n@PropertySource(&quot;classpath:\/mysql.properties&quot;)\r\n@ComponentScan(basePackages = &quot;io.github.alicankustemur.blogproject&quot;)\r\npublic class BeanConfiguration {\r\n\t@Autowired\r\n\tpublic Environment environment;\r\n\r\n\t@Bean\r\n\tpublic SingleConnectionDataSource createDriverManagerDataSourceBean() {\r\n\t\tSingleConnectionDataSource driverManager = new SingleConnectionDataSource();\r\n\t\tdriverManager.setDriverClassName(environment.getProperty(&quot;driverClassName&quot;));\r\n\t\tdriverManager.setUrl(environment.getProperty(&quot;url&quot;));\r\n\t\tdriverManager.setUsername(environment.getProperty(&quot;username&quot;));\r\n\t\tdriverManager.setPassword(environment.getProperty(&quot;password&quot;));\r\n\t\treturn driverManager;\r\n\t}\r\n}\r\n<\/pre>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>Bu s\u0131n\u0131f\u0131n bir konfigurasyon i\u015flemi yapt\u0131\u011f\u0131n\u0131 belirtmek i&ccedil;in <strong>@Configuration <\/strong>anotasyonunu s\u0131n\u0131f\u0131n ba\u015f\u0131na ekliyoruz.<br \/>\r\n<br \/>\r\n<strong>@PropertySource <\/strong>anotasyonu i&ccedil;erisinde ki <strong>&quot;classpath:\/mysql.properties&quot; <\/strong>de\u011feri <strong>mysql.properties <\/strong>dosyas\u0131n\u0131 classpath i&ccedil;erisinde aray\u0131p <strong>Environment&#39;a<\/strong> enjekte etmektedir.<br \/>\r\nDaha sonra <strong>getProperty()&nbsp; <\/strong>methodu ile birlikte properties dosyas\u0131nda ki de\u011fi\u015fken de\u011ferlerine eri\u015fiyoruz.Bu de\u011ferleri de olu\u015fturdu\u011fumuz <strong>SingleConnectionDataSource<\/strong> nesnesine set ediyoruz.<br \/>\r\n<br \/>\r\nBurada <strong>SingleConnectionDataSource <\/strong>kullanmam\u0131n sebebi bu s\u0131n\u0131f ile yap\u0131lan <strong>DataSource<\/strong> tan\u0131mlamalar\u0131 sadece bir <strong>Connection <\/strong>nesnesinin kullan\u0131m\u0131na izin verir.Uygulama her zaman ayn\u0131 <strong>Connection <\/strong>nesnesini kullanarak &ccedil;al\u0131\u015fmay\u0131 s&uuml;rd&uuml;r&uuml;r.<strong>DriverManagerDataSource <\/strong>kullan\u0131larak olu\u015fturulan bir <strong>DataSource <\/strong>tan\u0131mlamas\u0131 her veri taban\u0131 ba\u011flant\u0131 iste\u011fi i&ccedil;in yeni bir <strong>Connection<\/strong> nesnesi olu\u015fturacakt\u0131r.<br \/>\r\n<br \/>\r\n<strong>@ComponentScan <\/strong>anotasyonu ile Spring&#39;e gerekli s\u0131n\u0131flar\u0131 classpath i&ccedil;erisinde aramas\u0131 gerekti\u011fini belirtiyoruz.<br \/>\r\n<br \/>\r\nBurada <strong>createDriverManagerDataSourceBean() <\/strong>methodu &uuml;zerinde ki <strong>@Bean <\/strong>anotasyonu methodu bean haline getirip <strong>DAO <\/strong>i\u015flemleri i&ccedil;in <strong>Repository <\/strong>s\u0131n\u0131flar\u0131 i&ccedil;erisinde <strong>DataSource <\/strong>tan\u0131mlamalar\u0131na <strong>@Autowired <\/strong>anotasyonu ile otomatik olarak enjekte edece\u011fiz.<br \/>\r\n&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>A\u015fa\u011f\u0131da bununla ilgili k\u0131sa bir &ouml;rnek verilmi\u015ftir.<\/p>\r\n\r\n<p>@Componentpublic class JdbcRepositoryImpl implements Repository{ @Autowired private DataSource dataSource; @Override public void save(User user) { PreparedStatement preparedStatement = null; try { Connection connection = dataSource.getConnection(); preparedStatement = connection .prepareStatement(&quot;INSERT INTO user (id,name) VALUES (?,?)&quot;); preparedStatement.setLong(1, user.getId()); preparedStatement.setString(2, user.getName()); preparedStatement.executeUpdate(); preparedStatement.close(); } catch (Exception e) { } } }<\/p>\r\n\r\n<p>Olu\u015fturdu\u011fumuz konfigurasyon s\u0131n\u0131f\u0131n\u0131 <strong>ApplicationContext <\/strong>&uuml;zerinden &ccedil;a\u011f\u0131rabilmek i&ccedil;in <strong>AnnotationConfigApplicationContext <\/strong>nesnesi ile olu\u015fturup constructor de\u011ferine ilgili konfigurasyon s\u0131n\u0131f\u0131n\u0131 belirtmek gerekmektedir.<br \/>\r\n<br \/>\r\nA\u015fa\u011f\u0131da bununla ilgili k\u0131sa bir &ouml;rnek verilmi\u015ftir.<\/p>\r\n\r\n<p>public class Main{ public static void main(String[] args) throws SQLException { ApplicationContext applicationContext = new AnnotationConfigApplicationContext(BeanConfiguration.class); Repository repository = applicationContext.getBean(Repository.class); User user = new User(&quot;1&quot;,&quot;Ali Can Ku\u015ftemur&quot;); repository.save(user); }}<\/p>\r\n","date":"1460987141","tags":"java , spring, datasource","link":"spring-framework-ile-java-tabanli-datasource-konfigurasyonu"}]