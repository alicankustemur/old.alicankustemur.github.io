<p>Merhaba arkadaşlar ,bu yazdıma <strong>Spring Framework</strong> <strong>DataSource </strong>konfigurasyonunu <strong>XML</strong> kullanmadan sadece <strong>Java </strong>tabanlı olarak oluşturacağız.<strong>(Bu &ouml;rnekte MySQL kullanılacaktır.) </strong><br /><br />&Ouml;ncelikle <strong>.properties </strong>dosyamızı oluşturuyoruz.<br /><br />&nbsp;</p><sh class=\"brush: java\">driverClassName = com.mysql.jdbc.Driverurl = jdbc:mysql://localhost:3306/database-nameusername = rootpassword =&nbsp;</sh><p>&nbsp;</p><p><br />Ardından sınıfımızı oluşturuyoruz.</p><sh class=\"brush: java\" highlight=\"13\" >@Configuration@PropertySource(&quot;classpath:/mysql.properties&quot;)@ComponentScan(basePackages = &quot;io.github.alicankustemur.blogproject&quot;)public class BeanConfiguration{ @Autowired public Environment  environment; @Bean public SingleConnectionDataSource createDriverManagerDataSourceBean() {  SingleConnectionDataSource driverManager = new SingleConnectionDataSource();  driverManager.setDriverClassName(environment.getProperty(&quot;driverClassName&quot;));  driverManager.setUrl(environment.getProperty(&quot;url&quot;));  driverManager.setUsername(environment.getProperty(&quot;username&quot;));  driverManager.setPassword(environment.getProperty(&quot;password&quot;));  return driverManager; }}</sh><p>Bu sınıfın bir konfigurasyon işlemi yaptığını belirtmek i&ccedil;in <strong>@Configuration </strong>anotasyonunu sınıfın başına ekliyoruz.<br /><br /><strong>@PropertySource </strong>anotasyonu i&ccedil;erisinde ki <strong>&quot;classpath:/mysql.properties&quot; </strong>değeri <strong>mysql.properties </strong>dosyasını classpath i&ccedil;erisinde arayıp <strong>Environment&#39;a</strong> enjekte etmektedir.<br />Daha sonra <strong>getProperty()&nbsp; </strong>methodu ile birlikte properties dosyasında ki değişken değerlerine erişiyoruz.Bu değerleri de oluşturduğumuz <strong>SingleConnectionDataSource</strong> nesnesine set ediyoruz.<br /><br />Burada <strong>SingleConnectionDataSource </strong>kullanmamın sebebi bu sınıf ile yapılan <strong>DataSource</strong> tanımlamaları sadece bir <strong>Connection </strong>nesnesinin kullanımına izin verir.Uygulama her zaman aynı <strong>Connection </strong>nesnesini kullanarak &ccedil;alışmayı s&uuml;rd&uuml;r&uuml;r.<strong>DriverManagerDataSource </strong>kullanılarak oluşturulan bir <strong>DataSource </strong>tanımlaması her veri tabanı bağlantı isteği i&ccedil;in yeni bir <strong>Connection</strong> nesnesi oluşturacaktır.<br /><br /><strong>@ComponentScan </strong>anotasyonu ile Spring&#39;e gerekli sınıfları classpath i&ccedil;erisinde araması gerektiğini belirtiyoruz.<br /><br />Burada <strong>createDriverManagerDataSourceBean() </strong>methodu &uuml;zerinde ki <strong>@Bean </strong>anotasyonu methodu bean haline getirip <strong>DAO </strong>işlemleri i&ccedil;in <strong>Repository </strong>sınıfları i&ccedil;erisinde <strong>DataSource </strong>tanımlamalarına <strong>@Autowired </strong>anotasyonu ile otomatik olarak enjekte edeceğiz.<br />&nbsp;</p><p>Aşağıda bununla ilgili kısa bir &ouml;rnek verilmiştir.</p><sh class=\"brush: java\">@Componentpublic class JdbcRepositoryImpl implements Repository{  @Autowired private DataSource dataSource;  @Override public void save(User user) {  shparedStatement shparedStatement = null;  try  {   Connection connection = dataSource.getConnection();   shparedStatement = connection     .shpareStatement(&quot;INSERT INTO user (id,name) VALUES (?,?)&quot;);   shparedStatement.setLong(1, user.getId());   shparedStatement.setString(2, user.getName());   shparedStatement.executeUpdate();   shparedStatement.close();  }  catch (Exception e)  {  } } }</sh><p>Oluşturduğumuz konfigurasyon sınıfını <strong>ApplicationContext </strong>&uuml;zerinden &ccedil;ağırabilmek i&ccedil;in <strong>AnnotationConfigApplicationContext </strong>nesnesi ile oluşturup constructor değerine ilgili konfigurasyon sınıfını belirtmek gerekmektedir.<br /><br />Aşağıda bununla ilgili kısa bir &ouml;rnek verilmiştir.</p><sh class=\"brush: java\" highlight=\"7\" >public class Main{ public static void main(String[] args) throws SQLException {  ApplicationContext applicationContext = new AnnotationConfigApplicationContext(BeanConfiguration.class);  Repository repository = applicationContext.getBean(Repository.class);  User user = new User(&quot;1&quot;,&quot;Ali Can Kuştemur&quot;);  repository.save(user); }}</sh>[{"id":"139","title":"Spring Framework ile Java Tabanl\u0131 DataSource Konfigurasyonu","content_half":"\r\n\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql:\/\/localhost:3306\/database-name\r\nusername = root\r\npassword =\u00a0\r\n\r\n...\n","content_full":"<sh class=\"brush:java\">\r\n\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql:\/\/localhost:3306\/database-name\r\nusername = root\r\npassword =\u00a0\r\n\r\n<\/sh>","date":"1460987141","tags":"java , spring, datasource","link":"spring-framework-ile-java-tabanli-datasource-konfigurasyonu"}]