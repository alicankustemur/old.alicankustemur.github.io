[
{
		"id": "139",
		"title": "Spring Framework ile Java Tabanlı DataSource Konfigurasyonu",
		"content_half": "Merhaba arkadaşlar ,bu yazdıma Spring Framework DataSource konfigurasyonunu XML kullanmadan sadece Java tabanlı olarak oluşturacağız.(Bu &ouml;rnekte MySQL kullanılacaktır.) \r\n\r\n&Ouml;ncelikle .properties dosyamızı oluşturuyoruz.\r\n\r\n&nbsp;\r\n\r\n\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql://localhost:3306/database-name\r\nusername = root\r\npassword =&nbsp;\r\n\r\n\r\n&nbsp;\r\n\r\n\r\nArdından sınıfımızı oluşturuyoruz.\r\n\r\n\r\n@Configuration\r\n@PropertySource(&quot;classpath:/mysql.p...\n",
		"content_full": "<p>Merhaba arkadaşlar ,bu yazdıma <strong>Spring Framework</strong> <strong>DataSource </strong>konfigurasyonunu <strong>XML</strong> kullanmadan sadece <strong>Java </strong>tabanlı olarak oluşturacağız.<strong>(Bu &ouml;rnekte MySQL kullanılacaktır.) </strong><br />\r\n<br />\r\n&Ouml;ncelikle <strong>.properties </strong>dosyamızı oluşturuyoruz.<br />\r\n<br />\r\n&nbsp;</p>\r\n\r\n<sh class=\"brush: java\">\r\ndriverClassName = com.mysql.jdbc.Driver\r\nurl = jdbc:mysql://localhost:3306/database-name\r\nusername = root\r\npassword =&nbsp;\r\n</sh>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><br />\r\nArdından sınıfımızı oluşturuyoruz.</p>\r\n\r\n<sh class=\"brush: java\" highlight=\"13\" >\r\n@Configuration\r\n@PropertySource(&quot;classpath:/mysql.properties&quot;)\r\n@ComponentScan(basePackages = &quot;io.github.alicankustemur.blogproject&quot;)\r\npublic class BeanConfiguration\r\n{\r\n\r\n @Autowired\r\n public Environment  environment;\r\n\r\n @Bean\r\n public SingleConnectionDataSource createDriverManagerDataSourceBean()\r\n {\r\n  SingleConnectionDataSource driverManager = new SingleConnectionDataSource();\r\n  driverManager.setDriverClassName(environment.getProperty(&quot;driverClassName&quot;));\r\n  driverManager.setUrl(environment.getProperty(&quot;url&quot;));\r\n  driverManager.setUsername(environment.getProperty(&quot;username&quot;));\r\n  driverManager.setPassword(environment.getProperty(&quot;password&quot;));\r\n  return driverManager;\r\n }\r\n\r\n}\r\n</sh>\r\n\r\n<p>Bu sınıfın bir konfigurasyon işlemi yaptığını belirtmek i&ccedil;in <strong>@Configuration </strong>anotasyonunu sınıfın başına ekliyoruz.<br />\r\n<br />\r\n<strong>@PropertySource </strong>anotasyonu i&ccedil;erisinde ki <strong>&quot;classpath:/mysql.properties&quot; </strong>değeri <strong>mysql.properties </strong>dosyasını classpath i&ccedil;erisinde arayıp <strong>Environment&#39;a</strong> enjekte etmektedir.<br />\r\nDaha sonra <strong>getProperty()&nbsp; </strong>methodu ile birlikte properties dosyasında ki değişken değerlerine erişiyoruz.Bu değerleri de oluşturduğumuz <strong>SingleConnectionDataSource</strong> nesnesine set ediyoruz.<br />\r\n<br />\r\nBurada <strong>SingleConnectionDataSource </strong>kullanmamın sebebi bu sınıf ile yapılan <strong>DataSource</strong> tanımlamaları sadece bir <strong>Connection </strong>nesnesinin kullanımına izin verir.Uygulama her zaman aynı <strong>Connection </strong>nesnesini kullanarak &ccedil;alışmayı s&uuml;rd&uuml;r&uuml;r.<strong>DriverManagerDataSource </strong>kullanılarak oluşturulan bir <strong>DataSource </strong>tanımlaması her veri tabanı bağlantı isteği i&ccedil;in yeni bir <strong>Connection</strong> nesnesi oluşturacaktır.<br />\r\n<br />\r\n<strong>@ComponentScan </strong>anotasyonu ile Spring&#39;e gerekli sınıfları classpath i&ccedil;erisinde araması gerektiğini belirtiyoruz.<br />\r\n<br />\r\nBurada <strong>createDriverManagerDataSourceBean() </strong>methodu &uuml;zerinde ki <strong>@Bean </strong>anotasyonu methodu bean haline getirip <strong>DAO </strong>işlemleri i&ccedil;in <strong>Repository </strong>sınıfları i&ccedil;erisinde <strong>DataSource </strong>tanımlamalarına <strong>@Autowired </strong>anotasyonu ile otomatik olarak enjekte edeceğiz.<br />\r\n&nbsp;</p>\r\n\r\n<p>Aşağıda bununla ilgili kısa bir &ouml;rnek verilmiştir.</p>\r\n\r\n\r\n<sh class=\"brush: java\">\r\n@Component\r\npublic class JdbcRepositoryImpl implements Repository\r\n{\r\n \r\n @Autowired\r\n private DataSource dataSource;\r\n \r\n @Override\r\n public void save(User user)\r\n {\r\n  PreparedStatement preparedStatement = null;\r\n\r\n  try\r\n  {\r\n   Connection connection = dataSource.getConnection();\r\n   preparedStatement = connection\r\n     .prepareStatement(&quot;INSERT INTO user (id,name) VALUES (?,?)&quot;);\r\n   preparedStatement.setLong(1, user.getId());\r\n   preparedStatement.setString(2, user.getName());\r\n   preparedStatement.executeUpdate();\r\n   preparedStatement.close();\r\n\r\n  }\r\n  catch (Exception e)\r\n  {\r\n  }\r\n\r\n }\r\n\r\n \r\n}\r\n</sh>\r\n\r\n<p>Oluşturduğumuz konfigurasyon sınıfını <strong>ApplicationContext </strong>&uuml;zerinden &ccedil;ağırabilmek i&ccedil;in <strong>AnnotationConfigApplicationContext </strong>nesnesi ile oluşturup constructor değerine ilgili konfigurasyon sınıfını belirtmek gerekmektedir.<br />\r\n<br />\r\nAşağıda bununla ilgili kısa bir &ouml;rnek verilmiştir.</p>\r\n\r\n<sh class=\"brush: java\" highlight=\"7\" >\r\npublic class Main\r\n{\r\n\r\n public static void main(String[] args) throws SQLException\r\n {\r\n\r\n  ApplicationContext applicationContext = new AnnotationConfigApplicationContext(BeanConfiguration.class);\r\n  Repository repository = applicationContext.getBean(Repository.class);\r\n  User user = new User(&quot;1&quot;,&quot;Ali Can Kuştemur&quot;);\r\n  repository.save(user);\r\n }\r\n\r\n}\r\n</sh>\r\n",
		"date": "1460987141",
		"tags": "java , spring, datasource",
		"link": "spring-framework-ile-java-tabanli-datasource-konfigurasyonu"
	}
]